---
layout: post
title: Installing a WebSphere Custom Service
tags: [java, jython, websphere]
author_name: Joe O'Pecko
author_uri: http://twitter.com/opeckojo
---

There are a number of disparate resources on the web with varying levels of useful information regarding the creation and installation of Custom Services in the WebSphere Application Server. Say what you will about WAS, a lot of it is probably true and I can confirm, however, its still used in many shops and some of us can't escape it no matter how hard we try.

As part of a port of a product from Geronimo to WAS, I was looking for a way to maintain the use of the Log4j framework from within WAS and still have the ability to dynamically reload changes made to the log4j.[properties|xml] file in the runtime without having to recycle the server.

Unfortunately, many of the articles discussing how to integrate Log4j into an application running on WAS suggest to bundle it within the application itself. This may be a sufficient solution if you control the deployment environment. However, in my sitation the application is actually a product that runs on customers' infrastructure. As such, it was necessary for cutomers to be able to change the configuration file at will to get more or less information out of the sysem in order to diagnose any environmental issues they may be experiencing.

Custom Services in WAS have a number of restrictions that apply to their implementation which can be viewed "here":http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1//index.jsp?topic=/com.ibm.websphere.base.doc/info/aes/ae/trun_customservice.html. The one _rule_ that seemed to be a non-starter for me was the one that stated: _Creation of threads is not supported_. Without having a background thread to monitor the configuration file, I do not see a way to provide this feature. Luckily, there is nothing in the WAS runtime that prevents you from creating threads in your Custom Service so I was able to still provide this feature. While this may be in violation of the stated restrictions I am hard pressed to determine another way to monitor this file. without using threads The only alternative would be to omit the service from the product and have the customer incur the inconvenience of having to recycle their environment every time they want to make a configuration change. Being pragmatic, I think this is a fair tradeoff, unless the WAS team eventually puts some programmatic restrictions at some point in the future, this solution should remain valid regardless of its unsophistication.

Since Log4j's watchdog thread does not terminate until VM shutdown, its wise to use your own. In my case, I used a simple TimerTask to watch the configuration file. Nothing I've stated here was difficult to implement nor was it particularly hard to find reference materials around how to go about creating your own Custom Service. Where I struggled for too long was how to actually deploy the service once I created it. Additionally, I wanted to be able to pass properties into my service when I installed it so that I could dynamically set things like the location of the file on disk as well as the refresh rate. Through some fumbling around in the wsadmin tool and a little bit of luck I was able to piece together the commands required to install a Custom Service in WAS.

Without further ado, here is the fruit of my labor. I'm posting it so that if I ever need this information again, I do not need to go through the painful process of searching the InfoCenter and various search engines only to find out the information is not out there. Or at the very least not indexed very well. What follows is the bare minimum Jython code to install a Custom Service. Creating a parameterized script is left as an exercise to the reader. Hope it helps someone besides me.

{% highlight python %}
serverId = AdminConfig.getid('/Node:' +
                             nodeName +
                             '/Server:' +
                             serverName +
                             '/')
customService =
  AdminConfig.create('CustomService',
                     serverId,
                     [['enable', 'true'],
                      ['classname', 'foo.CustomService'],
                      ['displayName', 'Foo Service'],
                      ['description', ''],
                      ['classpath',
                       '${WAS_INSTALL_ROOT}/lib/ext/foo.jar'],
                      ['properties',
                       [[['name', 'configurationFile'],
                         ['value',
                          '${WAS_INSTALL_ROOT}/properties/log4j.properties'],
                         ['required', 'false']],
                        [['name', 'refreshPeriod'],
                         ['value', '5'],
                         ['required', 'false']]]]])
AdminConfig.save()
{% endhighlight %}

The better solution may be to just give up on integrating Log4j completely and just use the logging that's included with the application server. This may be the ultimate fate for me anyway, but for now its nice to know there's a workaround.
